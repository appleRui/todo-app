Time.zone.name
 Time.current
exit
puts Hirb::Helpers::Table.render [{:age=>10, :weight=>100}, {:age=>80, :weight=>500}]
puts Hirb::Helpers::Table.render [{:age=>10, :weight=>100}, {:age=>80, :weight=>500}]
exit
user = User.new(name: "test", email: "test@example.com", password: "password")
user
user.save
User.all
User.find(1).destory
User.find(1).destroy
User.all
exit
user = User.new(name: "test", email: "test@example.com", password: "password")
user
user.save
User.find(1).destroy
user
User.find(2).destroy
exit
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
email.length
user = User.new(name: "test", email: email, password: "password")
user
user.save
user.errors.full_messages
user.save
exit
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
user = User.new(name: "test", email: email, password: "password")
user.save
exit
user = User.new
user.save
user.errors.full_messages
I18n.t("activerecord.attributes.user")
user.password = "ああああああああ"
user.save
user.errors.full_messages
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
email.length
user = User.new(name: "test", email: email, password: "password")
user.save
exit
User.all
exit
payload = { sub: 1 }
payload
secret_key = Rails.application.credentials.secret_key_base
secret_key
Rails.application.credentials.secret_key_base
token = JWT.encode(payload, secret_key)
token
JWT.decode(token, secret_key)
JWT.decode(token)
Rails.application.credentials.secret_key_base
Rails.application.credentials
ENV['RAILS_MASTER_KEY']
exit
Rails.application.credentials.secret_key_base
exit
token = UserAuth::AuthToken.new.token
token = UserAuth::AuthToken.new.token
UserAuth::AuthToken.new.token
exit
token = UserAuth::AuthToken.new.token
token = UserAuth::AuthToken.new
exit
token = UserAuth::AuthToken.new.token
token = UserAuth::AuthToken.new.token
exit
token = UserAuth::AuthToken.new.token
exit
token = UserAuth::AuthToken.new.
token = UserAuth::AuthToken.new.token
1.day
2.week
exit
UserAuth::AuthToken.new.token
697122
exit
token = UserAuth::AuthToken.new(payload: {sub: 1}).token
token
UserAuth::AuthToken.new(token: token)
UserAuth::AuthToken.new(token: token).payload
exit
user = User.find(1)
user
token = user.to_token
token
User.from_token(token)
user.to_lifetime_token(2.hours)
token = user.to_lifetime_token(2.hours)
payload = UserAuth::AuthToken.new(token: token[:token]).payload
Time.at(payload["exp"])
exit
