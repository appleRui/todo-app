Time.zone.name
 Time.current
exit
puts Hirb::Helpers::Table.render [{:age=>10, :weight=>100}, {:age=>80, :weight=>500}]
puts Hirb::Helpers::Table.render [{:age=>10, :weight=>100}, {:age=>80, :weight=>500}]
exit
user = User.new(name: "test", email: "test@example.com", password: "password")
user
user.save
User.all
User.find(1).destory
User.find(1).destroy
User.all
exit
user = User.new(name: "test", email: "test@example.com", password: "password")
user
user.save
User.find(1).destroy
user
User.find(2).destroy
exit
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
email.length
user = User.new(name: "test", email: email, password: "password")
user
user.save
user.errors.full_messages
user.save
exit
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
user = User.new(name: "test", email: email, password: "password")
user.save
exit
user = User.new
user.save
user.errors.full_messages
I18n.t("activerecord.attributes.user")
user.password = "ああああああああ"
user.save
user.errors.full_messages
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
email.length
user = User.new(name: "test", email: email, password: "password")
user.save
exit
User.all
exit
payload = { sub: 1 }
payload
secret_key = Rails.application.credentials.secret_key_base
secret_key
Rails.application.credentials.secret_key_base
token = JWT.encode(payload, secret_key)
token
JWT.decode(token, secret_key)
JWT.decode(token)
Rails.application.credentials.secret_key_base
Rails.application.credentials
ENV['RAILS_MASTER_KEY']
exit
Rails.application.credentials.secret_key_base
exit
token = UserAuth::AuthToken.new.token
token = UserAuth::AuthToken.new.token
UserAuth::AuthToken.new.token
exit
token = UserAuth::AuthToken.new.token
token = UserAuth::AuthToken.new
exit
token = UserAuth::AuthToken.new.token
token = UserAuth::AuthToken.new.token
exit
token = UserAuth::AuthToken.new.token
exit
token = UserAuth::AuthToken.new.
token = UserAuth::AuthToken.new.token
1.day
2.week
exit
UserAuth::AuthToken.new.token
697122
exit
token = UserAuth::AuthToken.new(payload: {sub: 1}).token
token
UserAuth::AuthToken.new(token: token)
UserAuth::AuthToken.new(token: token).payload
exit
user = User.find(1)
user
token = user.to_token
token
User.from_token(token)
user.to_lifetime_token(2.hours)
token = user.to_lifetime_token(2.hours)
payload = UserAuth::AuthToken.new(token: token[:token]).payload
Time.at(payload["exp"])
exit
User.all
Todo.all
exit
User.all
10.times do |n|\
  name = "user#{n}"\
  email = "#{name}@example.com"\
  user = User.find_or_initialize_by(email: email, activated: true)\
  \
  if user.new_record?\
    user.name = name\
    user.password = "password"\
    user.save!\
  end\
end
10.times do |n|\
  name = "タスク#{n}"\
  todo = Todo.find_or_initialize_by(name: name)\
  \
  if todo.new_record?\
    todo.name = name\
    user.save!\
  end\
end
10.times do |n|\
  name = "タスク#{n}"\
  todo = Todo.find_or_initialize_by(name: name)\
  \
  if todo.new_record?\
    todo.name = name\
    todo.save!\
  end\
end
puts "users = #{Todo.count}"
Todo.all
User.all
exit
User.all
User.find(1)
user = User.find(1)
user.update(refresh_token: 'tokentoken')
user = User.find(1)
User.find(1)
exit
u = User.find(0)
u = User.find(1)
u.update(refresh_token: "tokentoken")
exit
User.new(name: 'test@example.com', password: 'password', acticve: true)
User.new(name: 'test@example.com', password: 'password', active: true)
User.all
User.new(name: 'test@example.com', password: 'password', activated: true)
user = User.new(name: 'テストユーザー', email: 'test@example.com', password: 'password', activated: true)
user
user.save!
exit
Note.all
todo.all
Todo.all
exit
Note.all
exit
Note.all
Note.all
Note.all
exit
Note.destory_all
Note.destroy_all
10.times do |n|\
  title = "ノート#{n}"\
  content = "ノート#{n}のコンテンツ"\
  note = Note.find_or_initialize_by(title: title)\
  \
  if note.new_record?\
    note.title = title\
    note.content = content\
    note.user_id = 11\
    note.save!\
  end\
end
puts "Notes = #{Note.count}"
Note.destroy_all
10.times do |n|\
  title = "ノート#{n}"\
  content = "ノート#{n}のコンテンツ"\
  note = Note.find_or_initialize_by(title: title)\
  \
  if note.new_record?\
    note.title = title\
    note.content = content\
    note.user_id = 11\
    note.save!\
  end\
end
Note.destroy_all
10.times do |n|\
  title = "ノート#{n}"\
  content = "ノート#{n}のコンテンツ"\
  note = Note.find_or_initialize_by(title: title)\
  \
  if note.new_record?\
    note.title = title\
    note.content = content\
    note.user_id = 11\
    note.save!\
  end\
end
Note.destroy_all
10.times do |n|\
  title = "ノート#{n}"\
  content = "ノート#{n}のコンテンツ"\
  note = Note.find_or_initialize_by(title: title)\
  \
  if note.new_record?\
    note.title = title\
    note.content = content\
    note.user_id = 11\
    note.save!\
  end\
end
Note.destroy_all
10.times do |n|\
  title = "ノート#{n}"\
  content = "# ノート#{n}のコンテンツ"\
  note = Note.find_or_initialize_by(title: title)\
  \
  if note.new_record?\
    note.title = title\
    note.content = content\
    note.user_id = 11\
    note.save!\
  end\
end
Note.destroy_all
10.times do |n|\
  title = "ノート#{n}"\
  content = "# ノート#{n}のコンテンツ"\
  note = Note.find_or_initialize_by(title: title)\
  \
  if note.new_record?\
    note.title = title\
    note.content = content\
    note.user_id = 11\
    note.save!\
  end\
end
Note.destroy_all
10.times do |n|\
  title = "ノート#{n}"\
  content = "# ノート#{n}のコンテンツ"\
  note = Note.find_or_initialize_by(title: title)\
  \
  if note.new_record?\
    note.title = title\
    note.content = content\
    note.user_id = 11\
    note.save!\
  end\
end
Note.destroy_all
10.times do |n|\
  title = "ノート#{n}"\
  content = "# ノート#{n}のコンテンツ"\
  note = Note.find_or_initialize_by(title: title)\
  \
  if note.new_record?\
    note.title = title\
    note.content = content\
    note.user_id = 11\
    note.save!\
  end\
end
exit
Note.destory_all
Note.destroy_all
10.times do |n|\
  title = "ノート#{n}"\
  content = "# ノート#{n}のコンテンツ"\
  note = Note.find_or_initialize_by(title: title)\
  \
  if note.new_record?\
    note.title = title\
    note.content = content\
    note.user_id = 11\
    note.save!\
  end\
end
exit
Time.at(1648807018693)
Date.new(1648807018693)
Datetime.new(1648807018693)
DateTime.new(1648807018693)
DateTime.new(1648807344428)
Date.new(1648807344428)
Date.params(1648807344428)
Date.parse(1648807344428)
DateTime.parse(1648807344428)
Time.parse(1648807344428)
Time.at(1648807344428)
Time.at(1648807344428)
Time.at(1648807344428)
Time.at(1648807344428 / 1000.0)
Time.at(1648807344428 / 1000)
exit
User.create({name: "テストユーザー", email: "test@example.com", password: "password"})
User.all
User.all
User.update({activated: true, admin: true})
User.all
Todo.all
Todo.all
exit
